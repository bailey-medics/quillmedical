name: Non-main branch workflows

on:
  push:
    branches-ignore: [main, master]
  pull_request:
    branches-ignore: [main, master]

permissions:
  contents: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Python pre-commit
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

      # Node / Yarn Berry
      - name: Set up Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack & pin Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate
          yarn --version

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            frontend/.yarn/cache
            frontend/.yarn/install-state.gz
            frontend/node_modules
          key: ${{ runner.os }}-yarn4-nm-${{ hashFiles('frontend/yarn.lock', 'frontend/.yarnrc.yml') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-nm-

      - name: Install deps
        run: |
          cd frontend
          yarn install

      - name: ESLint
        run: |
          cd frontend
          yarn eslint

      - name: Prettier
        run: |
          cd frontend
          yarn prettier

      - name: Stylelint
        run: |
          cd frontend
          yarn stylelint

      - name: TypeScript (noEmit)
        run: |
          cd frontend
          yarn typecheck

  merge-to-main:
    needs: code-quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Merge branch into main and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we have the main branch
          git fetch origin main:main || git fetch origin refs/heads/main:main

          # Create a merge commit of the current HEAD into main
          git checkout main
          # Determine branch name: for PRs use GITHUB_HEAD_REF, otherwise use GITHUB_REF_NAME
          # GITHUB_HEAD_REF is populated for pull_request events, and GITHUB_REF_NAME is set by actions/checkout
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME:-}}"
          BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -d '[:space:]')

          if [ -z "$BRANCH_NAME" ]; then
            echo "ERROR: BRANCH_NAME is empty. Could not determine the branch to merge. Exiting." >&2
            exit 1
          fi

          echo "Merging '$BRANCH_NAME' into main"

          if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "refs/heads/main" ]; then
            echo "Refusing to merge 'main' into main. Nothing to do.";
            exit 0
          fi

          # Ensure we have the target branch locally so we can merge it
          if ! git rev-parse --verify --quiet "$BRANCH_NAME"; then
            echo "Fetching branch '$BRANCH_NAME' from origin"
            if ! git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"; then
              echo "ERROR: Failed to fetch branch '$BRANCH_NAME' from origin" >&2
              exit 1
            fi
          fi

          # Attempt the merge; on conflict, abort and fail the job so humans can resolve
          if git merge --no-ff "$BRANCH_NAME" -m "Merge branch '$BRANCH_NAME' into main"; then
            echo "Merge succeeded"
          else
            echo "Merge failed due to conflicts. Aborting merge and exiting with failure." >&2
            git merge --abort || true
            exit 1
          fi

          # Push back to origin main (GITHUB_TOKEN used by the checkout action)
          git push origin main
