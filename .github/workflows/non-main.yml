name: Non-main branch workflows

on:
  push:
    branches-ignore: [main, master]
  pull_request:
    branches-ignore: [main, master]

permissions:
  contents: write

concurrency:
  group: nonmain-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Python: pre-commit (Option B: own venv + cache) ----------
  python_styling:
    runs-on: ubuntu-latest
    name: Python styling
    timeout-minutes: 15
    env:
      PRE_COMMIT_HOME: ${{ github.workspace }}/.pre-commit-cache
      PIP_CACHE_DIR:   ${{ github.workspace }}/.pip-cache
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache venv & pre-commit & pip wheels
      # expressions below are valid because env is defined at job level
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ${{ env.PRE_COMMIT_HOME }}
            ${{ env.PIP_CACHE_DIR }}
          key: pc-venv-${{ runner.os }}-py312-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pc-venv-${{ runner.os }}-py312-
            pc-venv-${{ runner.os }}-

      - name: Ensure venv + pre-commit installed
        run: |
          if [ ! -x .venv/bin/pre-commit ]; then
            python -m venv .venv
            . .venv/bin/activate
            python -m pip install -U pip
            python -m pip install "pre-commit>=3,<5"
          else
            echo "Using cached .venv with pre-commit."
          fi

      - name: Warm pre-commit hooks (optional)
        run: |
          . .venv/bin/activate
          pre-commit install-hooks

      - name: Run pre-commit (all files)
        run: |
          . .venv/bin/activate
          pre-commit run --all-files --show-diff-on-failure --color=always



  # ---------- JS: run multiple tools in parallel via matrix ----------
  typescript_styling:
    runs-on: ubuntu-latest
    name: TypeScript styling
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        task: [eslint, prettier, stylelint, typecheck]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Enable Corepack & pin Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate
          yarn --version

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            frontend/.yarn/cache
            frontend/.yarn/install-state.gz
            frontend/node_modules
          key: ${{ runner.os }}-yarn4-nm-${{ hashFiles('frontend/yarn.lock', 'frontend/.yarnrc.yml') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-nm-

      - name: Install deps
        working-directory: frontend
        run: yarn install --immutable

      - name: Run ${{ matrix.task }}
        working-directory: frontend
        run: |
          case "${{ matrix.task }}" in
            eslint)   yarn eslint ;;
            prettier) yarn prettier ;;
            stylelint) yarn stylelint ;;
            typecheck) yarn typecheck ;;  # typically: tsc --noEmit -p tsconfig.app.json
          esac

  python_unit_tests:
    runs-on: ubuntu-latest
    name: Python unit tests
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install backend deps
        working-directory: backend
        run: |
          poetry install --no-interaction --no-ansi --with dev

      - name: Run unit tests
        working-directory: backend
        run: |
          poetry run pytest -q

  # ---------- Merge to main (only on push, never from main) ----------
  merge-to-main:
    runs-on: ubuntu-latest
    name: Merge branch into main
    needs: [python_styling, typescript_styling, python_unit_tests]
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Merge branch into main and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure we have latest main locally
          git fetch origin main:main || git fetch origin refs/heads/main:main

          # Source branch name from the push event
          BRANCH_NAME="${GITHUB_REF_NAME:-}"
          BRANCH_NAME=$(echo "$BRANCH_NAME" | tr -d '[:space:]')

          if [ -z "$BRANCH_NAME" ]; then
            echo "ERROR: Cannot determine source branch." >&2
            exit 1
          fi

          if [ "$BRANCH_NAME" = "main" ]; then
            echo "Not merging main into main. Exiting."
            exit 0
          fi

          echo "Merging '$BRANCH_NAME' into main"
          git checkout main

          # Ensure the source branch exists locally
          if ! git rev-parse --verify --quiet "$BRANCH_NAME"; then
            echo "Fetching branch '$BRANCH_NAME' from origin"
            git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"
          fi

          # Attempt merge; on conflict, abort and fail
          if git merge --no-ff "$BRANCH_NAME" -m "Merge branch '$BRANCH_NAME' into main"; then
            echo "Merge succeeded"
          else
            echo "Merge conflict. Aborting."
            git merge --abort || true
            exit 1
          fi

          git push origin main
