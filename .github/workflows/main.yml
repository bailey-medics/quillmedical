name: Main branch workflows

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["Non-main branch workflows"]
    types: [completed]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build frontend + MkDocs site
    runs-on: ubuntu-latest
    # If this was triggered by workflow_run, only proceed if the previous workflow succeeded
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Required for GitHub Pages artifact wiring
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # ---------- Frontend docs (Node 24 + Yarn) ----------
      - name: Set up Node (24.x)
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Enable Corepack & pin Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.10.3 --activate
          yarn --version

      - name: Install frontend deps
        working-directory: frontend
        run: |
          yarn install --frozen-lockfile

      - name: Build Storybook static site
        working-directory: frontend
        run: |
          yarn build-storybook

      - name: Build frontend docs
        working-directory: frontend
        run: |
          yarn docs:build

      - name: Collect frontend docs into /site
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p site

          # Add or adjust these candidate output paths to match your frontend build
          CANDIDATES=(
            "docs/docs/frontend"
            "docs/docs/storybook"
          )

          copied="false"
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ]; then
              name=$(basename "$d")
              echo "Copying $d -> site/$name"
              mkdir -p "site/$name"
              cp -r "$d"/. "site/$name/"
              copied="true"
            fi
          done

          if [ "$copied" != "true" ]; then
            echo "WARNING: No known frontend docs output folder found. Nothing copied."
          fi

      # ---------- Backend docs (MkDocs via Poetry) ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install project docs deps via Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade poetry
          cd backend
          poetry install --no-interaction --no-ansi --with dev

      - name: Build MkDocs site into /site
        run: |
          cd backend
          poetry run mkdocs build -f ../docs/mkdocs.yml -d ../site

      - name: Show final site tree (debug)
        run: |
          echo "Final site/ content:"
          ls -la site || true

      # ---------- Upload for Pages ----------
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
